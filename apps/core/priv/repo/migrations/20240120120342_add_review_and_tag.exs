defmodule Core.Repo.Migrations.AddReviewAndTag do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tag, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :name, :citext, null: false
    end

    create unique_index(:tag, [:name], name: "tag_unique_name_index")

    create table(:review_tag, primary_key: false) do
      add :review_id, :uuid, null: false, primary_key: true
      add :tag_id, :uuid, null: false, primary_key: true
    end

    create table(:review, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
    end

    alter table(:review_tag) do
      modify :review_id,
             references(:review,
               column: :id,
               name: "review_tag_review_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :tag_id,
             references(:tag,
               column: :id,
               name: "review_tag_tag_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:review) do
      add :image, :citext, null: false, default: "/images/default/review.webp"
      add :name, :citext, null: false
      add :score, :bigint, null: false
      add :contents, {:array, :text}, null: false, default: []
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end
  end

  def down do
    alter table(:review) do
      remove :updated_at
      remove :inserted_at
      remove :contents
      remove :score
      remove :name
      remove :image
    end

    drop constraint(:review_tag, "review_tag_review_id_fkey")

    drop constraint(:review_tag, "review_tag_tag_id_fkey")

    alter table(:review_tag) do
      modify :tag_id, :uuid
      modify :review_id, :uuid
    end

    drop table(:review)

    drop table(:review_tag)

    drop_if_exists unique_index(:tag, [:name], name: "tag_unique_name_index")

    drop table(:tag)
  end
end
