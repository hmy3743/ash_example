defmodule Core.Repo.Migrations.ReviewTagDeferrable do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:user) do
      modify :id, :uuid, default: fragment("uuid_generate_v4()")
    end

    alter table(:tag) do
      modify :id, :uuid, default: fragment("uuid_generate_v4()")
    end

    drop constraint(:review_tag, "review_tag_tag_id_fkey")

    drop constraint(:review_tag, "review_tag_review_id_fkey")

    alter table(:review) do
      modify :id, :uuid, default: fragment("uuid_generate_v4()")
    end

    alter table(:review_tag) do
      modify :review_id,
             references(:review,
               column: :id,
               name: "review_tag_review_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    execute(
      "ALTER TABLE review_tag alter CONSTRAINT review_tag_review_id_fkey DEFERRABLE INITIALLY DEFERRED"
    )

    alter table(:review_tag) do
      modify :tag_id,
             references(:tag,
               column: :id,
               name: "review_tag_tag_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    execute(
      "ALTER TABLE review_tag alter CONSTRAINT review_tag_tag_id_fkey DEFERRABLE INITIALLY DEFERRED"
    )
  end

  def down do
    drop constraint(:review_tag, "review_tag_tag_id_fkey")

    alter table(:review_tag) do
      modify :tag_id,
             references(:tag,
               column: :id,
               name: "review_tag_tag_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:review_tag, "review_tag_review_id_fkey")

    alter table(:review_tag) do
      modify :review_id,
             references(:review,
               column: :id,
               name: "review_tag_review_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:review) do
      modify :id, :uuid, default: nil
    end

    alter table(:tag) do
      modify :id, :uuid, default: nil
    end

    alter table(:user) do
      modify :id, :uuid, default: nil
    end

    execute("ALTER TABLE review_tag alter CONSTRAINT review_tag_tag_id_fkey NOT DEFERRABLE")

    execute("ALTER TABLE review_tag alter CONSTRAINT review_tag_review_id_fkey NOT DEFERRABLE")
  end
end